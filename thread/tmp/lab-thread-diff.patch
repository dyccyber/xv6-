diff --git a/Makefile b/Makefile
index 7a7e380..f768acd 100644
--- a/Makefile
+++ b/Makefile
@@ -188,7 +188,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+    $U/_uthread\
 
 
 
diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..17492e8
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1,2 @@
+11111111111111111111111111111
+111111111111111111111111111
\ No newline at end of file
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..1aec7a3 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,6 +30,15 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  if(++bstate.nthread < nthread) {
+    pthread_cond_wait(&bstate.barrier_cond, &bstate.barrier_mutex);
+  } else {
+    bstate.nthread = 0;
+    bstate.round++;
+    pthread_cond_broadcast(&bstate.barrier_cond);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
   
 }
 
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 82afe76..b2732aa 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -16,7 +16,8 @@ struct entry {
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
-
+//new add
+pthread_mutex_t locks[NBUCKET];
 
 double
 now()
@@ -40,7 +41,7 @@ static
 void put(int key, int value)
 {
   int i = key % NBUCKET;
-
+  pthread_mutex_lock(&locks[i]);
   // is the key already present?
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
@@ -54,20 +55,19 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
-
+  pthread_mutex_unlock(&locks[i]);
 }
 
 static struct entry*
 get(int key)
 {
   int i = key % NBUCKET;
-
-
+  pthread_mutex_lock(&locks[i]);
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key) break;
   }
-
+  pthread_mutex_unlock(&locks[i]);
   return e;
 }
 
@@ -98,13 +98,16 @@ get_thread(void *xa)
   return NULL;
 }
 
+
 int
 main(int argc, char *argv[])
 {
   pthread_t *tha;
   void *value;
   double t1, t0;
-
+  for(int i=0;i<NBUCKET;i++) {
+    pthread_mutex_init(&locks[i], NULL); 
+  }
 
   if (argc < 2) {
     fprintf(stderr, "Usage: %s nthreads\n", argv[0]);
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..56a6051
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+1
\ No newline at end of file
diff --git a/user/uthread.c b/user/uthread.c
index 06349f5..cfa9795 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,14 +10,33 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
-
+// Saved registers for thread context switches.
+struct context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct context ctx; // 在 thread 中添加 context 结构体
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
-extern void thread_switch(uint64, uint64);
+extern void thread_switch(struct context* old, struct context* new); // 修改 thread_switch 函数声明
               
 void 
 thread_init(void)
@@ -62,6 +81,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch(&t->ctx, &next_thread->ctx); // 切换线程
   } else
     next_thread = 0;
 }
@@ -76,6 +96,9 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->ctx.ra = (uint64)func;       // 返回地址
+  // thread_switch 的结尾会返回到 ra，从而运行线程代码
+  t->ctx.sp = (uint64)&t->stack + (STACK_SIZE - 1);  // 栈指针
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..15532a4 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -1,11 +1,43 @@
+// uthread_switch.S
 	.text
 
 	/*
-         * save the old thread's registers,
-         * restore the new thread's registers.
-         */
+		 * save the old thread's registers,
+		 * restore the new thread's registers.
+		 */
 
+
+// void thread_switch(struct context *old, struct context *new);
 	.globl thread_switch
 thread_switch:
-	/* YOUR CODE HERE */
-	ret    /* return to ra */
+	sd ra, 0(a0)
+	sd sp, 8(a0)
+	sd s0, 16(a0)
+	sd s1, 24(a0)
+	sd s2, 32(a0)
+	sd s3, 40(a0)
+	sd s4, 48(a0)
+	sd s5, 56(a0)
+	sd s6, 64(a0)
+	sd s7, 72(a0)
+	sd s8, 80(a0)
+	sd s9, 88(a0)
+	sd s10, 96(a0)
+	sd s11, 104(a0)
+
+	ld ra, 0(a1)
+	ld sp, 8(a1)
+	ld s0, 16(a1)
+	ld s1, 24(a1)
+	ld s2, 32(a1)
+	ld s3, 40(a1)
+	ld s4, 48(a1)
+	ld s5, 56(a1)
+	ld s6, 64(a1)
+	ld s7, 72(a1)
+	ld s8, 80(a1)
+	ld s9, 88(a1)
+	ld s10, 96(a1)
+	ld s11, 104(a1)
+
+	ret    /* return to ra */
\ No newline at end of file
